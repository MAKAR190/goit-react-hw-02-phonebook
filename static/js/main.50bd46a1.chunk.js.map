{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ConatctList.js","components/Filter/Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","this","props","submit","nameChange","nameValue","numberValue","className","styles","wrapper","onSubmit","input","type","placeholder","name","value","onChange","button","React","Component","ContactItem","deleteFunction","contact","li","key","id","number","onClick","btn","ContactList","list","map","Filter","filterChange","filterValue","App","state","contacts","filter","handleChange","target","setState","handleSubmit","evt","preventDefault","newContact","v4","find","el","alert","prevState","handleDelete","filterContacts","startsWith","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oIACAA,EAAOC,QAAU,CAAC,QAAU,6BAA6B,OAAS,4BAA4B,MAAQ,6B,gBCAtGD,EAAOC,QAAU,CAAC,GAAK,wBAAwB,IAAM,2B,mBCArDD,EAAOC,QAAU,CAAC,MAAQ,wB,6NCCLC,E,uKACT,IAAD,EACgDC,KAAKC,MAApDC,EADD,EACCA,OAAQC,EADT,EACSA,WAAYC,EADrB,EACqBA,UAAWC,EADhC,EACgCA,YACvC,OACE,0BAAMC,UAAWC,IAAOC,QAASC,SAAUP,GACzC,mCACA,2BACEI,UAAWC,IAAOG,MAClBC,KAAK,OACLC,YAAY,aACZC,KAAK,OACLC,MAAOV,EACPW,SAAUZ,IAEZ,qCACA,2BACEG,UAAWC,IAAOG,MAClBC,KAAK,OACLC,YAAY,eACZC,KAAK,SACLC,MAAOT,EACPU,SAAUZ,IAEZ,4BAAQG,UAAWC,IAAOS,OAAQL,KAAK,UAAvC,oB,GAvBiCM,IAAMC,W,gBCehCC,MAdf,YAAmD,IAA5BC,EAA2B,EAA3BA,eAAgBC,EAAW,EAAXA,QACrC,OACE,wBAAIf,UAAWC,IAAOe,GAAIC,IAAKF,EAAQG,IACpCH,EAAQR,KADX,KACmBQ,EAAQI,OACzB,4BACEd,KAAK,SACLe,QAAS,kBAAMN,EAAeC,EAAQG,KACtClB,UAAWC,IAAOoB,KAHpB,YCLeC,E,uKACT,IACAR,EAAmBpB,KAAKC,MAAxBmB,eACR,OACE,6BACE,qDACA,4BACGpB,KAAKC,MAAM4B,KAAKC,KAAI,SAACT,GAAD,OACnB,kBAAC,EAAD,CAAaD,eAAgBA,EAAgBC,QAASA,a,GARzBJ,IAAMC,W,yBCWhCa,MAXf,YAAgD,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,YAC9B,OACE,2BACE3B,UAAWC,IAAOG,MAClBC,KAAK,OACLE,KAAK,SACLC,MAAOmB,EACPlB,SAAUiB,KCsEDE,E,4MAxEbC,MAAQ,CACNC,SAAU,GACVvB,KAAM,GACNY,OAAQ,GACRY,OAAQ,I,EAGVC,aAAe,YAAiB,IAAdC,EAAa,EAAbA,OACR1B,EAAgB0B,EAAhB1B,KAAMC,EAAUyB,EAAVzB,MACd,EAAK0B,SAAL,eAAiB3B,EAAOC,K,EAG1B2B,aAAe,SAACC,GACdA,EAAIC,iBACJ,IAAIC,EAAa,CACf/B,KAAM,EAAKsB,MAAMtB,KACjBY,OAAQ,EAAKU,MAAMV,OACnBD,GAAIqB,eAGJ,EAAKV,MAAMC,SAASU,MAClB,SAACC,GAAD,OAAQA,EAAGlC,OAAS+B,EAAW/B,MAAQkC,EAAGtB,SAAWmB,EAAWnB,UAGlEuB,MAAM,GAAD,OAAIJ,EAAW/B,KAAf,6BAEL,EAAK2B,UAAS,SAACS,GACb,MAAO,CACLb,SAAS,GAAD,mBAAMa,EAAUb,UAAhB,CAA0BQ,S,EAK1CM,aAAe,SAAC1B,GACd,EAAKgB,UAAS,SAACS,GACb,MAAO,CACLb,SAAUa,EAAUb,SAASC,QAAO,SAAChB,GACnC,OAAIA,EAAQG,KAAOA,U,uDAUjB,IAAD,EACoCxB,KAAKmC,MAAxCtB,EADD,EACCA,KAAMuB,EADP,EACOA,SAAUX,EADjB,EACiBA,OAAQY,EADzB,EACyBA,OAC1Bc,EAAiBf,EAASC,QAAO,SAACU,GAAD,OAAQA,EAAGlC,KAAKuC,WAAWf,MAElE,OACE,6BACE,yCACA,kBAAC,EAAD,CACEhC,YAAaoB,EACbrB,UAAWS,EACXV,WAAYH,KAAKsC,aACjBpC,OAAQF,KAAKyC,eAEf,wCACA,kBAAC,EAAD,CAAQT,aAAchC,KAAKsC,aAAcL,YAAaI,IACtD,kBAAC,EAAD,CACEjB,eAAgBpB,KAAKkD,aACrBrB,KAAMsB,EACN1B,OAAQA,S,GAlEAR,IAAMC,WCMJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50bd46a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactForm_wrapper__2tD9w\",\"button\":\"ContactForm_button__3uRwG\",\"input\":\"ContactForm_input__wIkP7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"ContactItem_li__2tl-I\",\"btn\":\"ContactItem_btn__Bea1G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__YiNPB\"};","import React from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nexport default class ContactForm extends React.Component {\r\n  render() {\r\n    const { submit, nameChange, nameValue, numberValue } = this.props;\r\n    return (\r\n      <form className={styles.wrapper} onSubmit={submit}>\r\n        <p>Name</p>\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          placeholder=\"Enter name\"\r\n          name=\"name\"\r\n          value={nameValue}\r\n          onChange={nameChange}\r\n        ></input>\r\n        <p>Number</p>\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          placeholder=\"Enter number\"\r\n          name=\"number\"\r\n          value={numberValue}\r\n          onChange={nameChange}\r\n        ></input>\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./ContactItem.module.css\";\r\n\r\nfunction ContactItem({ deleteFunction, contact }) {\r\n  return (\r\n    <li className={styles.li} key={contact.id}>\r\n      {contact.name}: {contact.number}\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => deleteFunction(contact.id)}\r\n        className={styles.btn}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\nexport default ContactItem;\r\n","import React from \"react\";\r\nimport ContactItem from \"../ContactItem/ContactItem\";\r\nexport default class ContactList extends React.Component {\r\n  render() {\r\n    const { deleteFunction } = this.props;\r\n    return (\r\n      <div>\r\n        <h2>Find contacts by name</h2>\r\n        <ul>\r\n          {this.props.list.map((contact) => (\r\n            <ContactItem deleteFunction={deleteFunction} contact={contact} />\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./Filter.module.css\";\r\nfunction Filter({ filterChange, filterValue }) {\r\n  return (\r\n    <input\r\n      className={styles.input}\r\n      type=\"text\"\r\n      name=\"filter\"\r\n      value={filterValue}\r\n      onChange={filterChange}\r\n    ></input>\r\n  );\r\n}\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport ContactForm from \"./components/ContactForm/ContactForm\";\r\nimport ContactList from \"./components/ContactList/ConatctList\";\r\nimport { v4 } from \"uuid\";\r\nimport Filter from \"./components/Filter/Filter\";\r\nclass App extends React.Component {\r\n  state = {\r\n    contacts: [],\r\n    name: \"\",\r\n    number: \"\",\r\n    filter: \"\",\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    let newContact = {\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n      id: v4(),\r\n    };\r\n    if (\r\n      this.state.contacts.find(\r\n        (el) => el.name === newContact.name && el.number === newContact.number\r\n      )\r\n    ) {\r\n      alert(`${newContact.name} is already in your list`);\r\n    } else {\r\n      this.setState((prevState) => {\r\n        return {\r\n          contacts: [...prevState.contacts, newContact],\r\n        };\r\n      });\r\n    }\r\n  };\r\n  handleDelete = (id) => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        contacts: prevState.contacts.filter((contact) => {\r\n          if (contact.id === id) {\r\n            return false;\r\n          } else {\r\n            return true;\r\n          }\r\n        }),\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, contacts, number, filter } = this.state;\r\n    const filterContacts = contacts.filter((el) => el.name.startsWith(filter));\r\n\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm\r\n          numberValue={number}\r\n          nameValue={name}\r\n          nameChange={this.handleChange}\r\n          submit={this.handleSubmit}\r\n        />\r\n        <h2>Contacts</h2>\r\n        <Filter filterChange={this.handleChange} filterValue={filter} />\r\n        <ContactList\r\n          deleteFunction={this.handleDelete}\r\n          list={filterContacts}\r\n          number={number}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}